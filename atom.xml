<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘先玉</title>
  
  <subtitle>知易行难</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liuxianyu.cn/"/>
  <updated>2020-01-02T14:47:49.000Z</updated>
  <id>http://liuxianyu.cn/</id>
  
  <author>
    <name>liuxy0551</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>回顾 2019，展望 2020</title>
    <link href="http://liuxianyu.cn/article/2019-2020.html"/>
    <id>http://liuxianyu.cn/article/2019-2020.html</id>
    <published>2020-01-02T14:47:49.000Z</published>
    <updated>2020-01-02T14:47:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p>2019 年过得很快，2020 年来的也很快，年度总结和年度规划实际上是拖了几天了，今天抽空完成了，其实也都是瞎忙。</p><a id="more"></a><h3 id="一-回顾"><a class="header-anchor" href="#一-回顾">¶</a>一、回顾</h3><h4 id="1-生活-差"><a class="header-anchor" href="#1-生活-差">¶</a>1、生活 - 差</h4><p>2019 年的生活可以总结为差。<br>　　1月份靠天吃饭，在腊月十七的时候就回了合肥，真真的体会到&quot;有钱男子汉，没钱汉子难&quot;。2月底花了两周左右的时间在 3 月初找到新工作，入职后生活渐渐步入正轨。<br>　　和大学同学&quot;合租&quot;这件事在现在看来是不对的。<br>　　5 月份的时候去下沙找郝老板拿了 5000 块，加上回合肥过年前拿的 3000 块共 8000 块，在我心里，我是按照大行星项目尾款去计算的。说实话，这样不是很合适，但是生活的实际情况已让我无法做其他选择，同时我对郝老板也从以前的感谢变成了如今的淡然，世事难料。<br>　　现在写这些的时候，想起和国栋在利一家园四周想象未来的场景，甚至有点心酸，也有点无力。<br>　　年中因为接触虚拟货币，后续一言难尽，不太想讲，希望以后引以为戒。2019 年并没有什么积蓄，但是从收入情况来看，也不是很糟。<br>　　在年尾的时候还是和萍商量去了义务一趟，实际效果给 70 分，因为本身也没有抱 80 分的希望。<br>　　2019 年也没有做什么运动，这样对身体是不太好的，知易行难。<br>　　在感情方面请坚持和萍一样，同时也请成长，<code>五年</code>。</p><h4 id="2-工作-良"><a class="header-anchor" href="#2-工作-良">¶</a>2、工作 - 良</h4><p>2019 年的工作能给出良的评分，完全是因为生芽和三木的原因。3 月 4 号入职生芽前的那段时间，谈不上差，谈不上差的意思是连差都不如，就是这么让人失望。<br>　　年初因为自己对于无基本工资保证做外包的虚高期望以及对郝老板的信任，致使经济上一塌糊涂，几近吃不上饭，想想也是太傻太年轻。<br>　　2 月底实在等不及郝老板的融资进程，和国栋都开始找工作。在 3 月 4 号加入生芽大家庭，当时龙修（时任技术总监）还在我要求的薪资基础上加了点。现在看来好在加了一点，否则到目前为止都没有谈薪，估计我的心理上会有很大落差。其实这里也有一些槽点。<br>　　入职一星期的时候郝老板以薪资翻倍叫我和国栋回去工作，我们但是思考再三还是拒绝了，当时考虑的有两点：一是以前的生活历历在目，二是新公司的同事很乐于教我，这些都是幸运的。<br>　　入职生芽后第一个项目是生芽课程，赶工期、没有产品、没有有效推进，基本开始的时候，我自己也不太看好这个项目，实际上也是如此，上线即死亡。到开始第二项目中间，因为公司的战略思考，我有了接近两个月较为悠闲的时间，但是说实话并没有利用好，大部分时间和精力花在了虚拟货币上，还和三木一起做了一个虚拟货币自动买卖的管理后台。以后要好好思考投资理财。<br>　　第二个项目是橙就业系列项目，这个项目在开始的时候我觉得很少人会在手机上去发布招聘信息、填写简历，在企业版和学生版都初步上线后，果然还是要退出企业版的 PC 端，这个临时的需求是令人痛苦的，因为时间非常紧，当时要求在国庆前上线，防止国庆假期太长而生疏了代码，有点道理吧，但是时间太紧。写企业版 PC 端的过程几乎都是前端的活，因为接口和移动端的基本一致。在此时，发现了一些前期开发中我没有注意到的问题，两个人写的相关代码居然字段名不一致，对此我需要检讨，三木说应该在开发初期就要求后端改正，以后注意。很庆幸我们在国庆假期前基本完成了，结束那晚是两点多到家的。较规定时间，我们还给自己留了一天工作时间，这一天是工作日，但是我没做什么工作，因为我没做过这么累的前端，三木也没有做过。这个 9 月份让人难忘，因为加班太多，三木还回去贴了活血止痛膏，最后一天我忙的工作时间超过 16 个小时，除了我的亲人朋友，应该是没有其他人关心的。<br>　　国庆前也并没有上线，还是觉得公司缺少某个岗位去统筹推荐各个项目推进。希望后面越来越好吧。<br>　　国庆之后基本就是修修补补，做做版本迭代，但基本每次版本迭代都会有新需求插队，好想要那种规范的迭代升级啊。期间最大的需求就是上架钉钉应用市场，很庆幸在 2019 年 12 月 31 日，我们上架了钉钉应用市场，历时近一个半月，心疼项目组好多遍。后续我会整理一下这次上架相关的一些文档资料和注意事项。<br>　　上架期间主要是后端同学忙的多，所以我和三木在 10 月份时想利用下班时间给自己做做项目，我提出的是记账小程序（自用），三木提出的互赞帮（双十一盖楼、拼多多砍价等）。三木是全栈，用 Ruby 很快就把互赞帮撸出来了，我帮着他写了移动端的几个页面，同时也接下了互赞帮的管理后台，主要是为了学习。实际上也学到了不少，这个项目现在虽然没什么人用，但是我学习的目的达到了。<br>　　<code>2019 年的工作很感谢三木。</code></p><h3 id="二-展望"><a class="header-anchor" href="#二-展望">¶</a>二、展望</h3><h4 id="1-生活"><a class="header-anchor" href="#1-生活">¶</a>1、生活</h4><p>我对 2020 年的生活并没有太大的期望，回家、买车、成长，还有就是元旦是否有机会见面，以及见面的成效。<br>　　5 月份房屋合同到期，到时候是去是留也就基本明了了，但是既然做出了承诺，还是算作定数吧，只是可能去义务不太方便了，希望自己不要就这么放弃了。<br>　　多陪陪家人吧，督促他们不要太劳累，让我们年轻人来承受多一点，只是为了以后能够有更多的时间陪伴我们。<br>　　运动运动吧，快两个萍了。<br>　　话少点吧，言多必失。<br>　　<code>身体健康</code>，<code>五年</code></p><h4 id="2-工作"><a class="header-anchor" href="#2-工作">¶</a>2、工作</h4><p>2020 年的工作是重点，也是起点，尽量稳重点，做好准备工作。<br>　　要在技术深度方面继续努力。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#介绍&quot;&gt;¶&lt;/a&gt;介绍&lt;/h2&gt;
&lt;p&gt;2019 年过得很快，2020 年来的也很快，年度总结和年度规划实际上是拖了几天了，今天抽空完成了，其实也都是瞎忙。&lt;/p&gt;
    
    </summary>
    
      <category term="小思" scheme="http://liuxianyu.cn/categories/%E5%B0%8F%E6%80%9D/"/>
    
    
      <category term="小思" scheme="http://liuxianyu.cn/tags/%E5%B0%8F%E6%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>H5 中的 Audio</title>
    <link href="http://liuxianyu.cn/article/h5-audio.html"/>
    <id>http://liuxianyu.cn/article/h5-audio.html</id>
    <published>2019-12-23T19:57:46.000Z</published>
    <updated>2019-12-23T19:57:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p>最近这个项目中在做题的时候需要播放语音，浏览器上自动播放 audio 或者 video 一直有这样或那样的限制和兼容问题。这里记录一下实现过程。</p><a id="more"></a><table><thead><tr><th style="text-align:center">属性</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">src</td><td>音频 URL</td></tr><tr><td style="text-align:center">muted</td><td>规定音频输出时应该被静音</td></tr><tr><td style="text-align:center">autoplay</td><td>音频在就绪后马上播放</td></tr><tr><td style="text-align:center">controls</td><td>向用户显示控件，如播放按钮</td></tr><tr><td style="text-align:center">loop</td><td>每当音频结束时重新开始播放</td></tr><tr><td style="text-align:center">preload</td><td>音频在页面加载时进行加载，并预备播放。如果同时使用了 autoplay，则忽略该属性</td></tr></tbody></table><p>浏览器为了提高用户体验，减少数据消耗，audio 的 autoplay 实现需要绕弯子：</p><blockquote><p>1、发生了用户行为，如：click、tap、etc<br>2、监听最外层 div 的鼠标移入事件，&lt;div (mouseenter)=“play()”&gt; <code>待验证</code></p></blockquote><p>否则，在 mounted 中直接调用<code>this.Player.play()</code>时 Chrome 会报错<code>Uncaught (in promise) DOMException: play() failed because the user didn't interact with the document first.</code></p><h3 id="一-封装-js-方法"><a class="header-anchor" href="#一-封装-js-方法">¶</a>一、封装 js 方法</h3><p>先写一个公用 js 文件：<code>AudioPlayer.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AudioPlayer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (audioList = [], options = null) &#123;</span><br><span class="line">    options = <span class="built_in">Object</span>.assign(&#123; <span class="attr">speed</span>: <span class="number">1.0</span>, <span class="attr">onEnd</span>: <span class="literal">null</span> &#125;, options)</span><br><span class="line">    <span class="keyword">this</span>.onEnd = options.onEnd</span><br><span class="line">    <span class="keyword">if</span> (audioList) &#123;</span><br><span class="line">      <span class="keyword">this</span>.audio = <span class="built_in">document</span>.createElement(<span class="string">'audio'</span>)</span><br><span class="line">      <span class="keyword">this</span>.audio.src = audioList[<span class="number">0</span>] || audioList[<span class="number">1</span>]</span><br><span class="line">      <span class="comment">// this.audio.muted = true</span></span><br><span class="line">      <span class="comment">// this.audio.autoplay = 'autoplay'</span></span><br><span class="line">      <span class="comment">// 播放速度</span></span><br><span class="line">      <span class="keyword">this</span>.audio.playbackRate = options.speed</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 开始播放</span></span><br><span class="line">  play () &#123;</span><br><span class="line">    <span class="keyword">this</span>.audio.play()</span><br><span class="line">    <span class="keyword">this</span>.onEnd &amp;&amp; <span class="keyword">this</span>.audio.addEventListener(<span class="string">'ended'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.onEnd()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> AudioPlayer</span><br></pre></td></tr></table></figure><h3 id="二-使用"><a class="header-anchor" href="#二-使用">¶</a>二、使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> AudioPlayer <span class="keyword">from</span> <span class="string">'../utils/media/AudioPlayer'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      Player: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 点击播放按钮</span></span><br><span class="line">    playBtn () &#123;</span><br><span class="line">      <span class="keyword">this</span>.Player.audio.muted = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">this</span>.Player.play()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="keyword">this</span>.Player = <span class="keyword">new</span> AudioPlayer(audioList, &#123; <span class="attr">speed</span>: <span class="number">1.25</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考资料：</p><ul><li><a href="https://juejin.im/post/5af7129bf265da0b8262df4c" target="_blank" rel="noopener">Chrome 66禁止声音自动播放之后</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#介绍&quot;&gt;¶&lt;/a&gt;介绍&lt;/h2&gt;
&lt;p&gt;最近这个项目中在做题的时候需要播放语音，浏览器上自动播放 audio 或者 video 一直有这样或那样的限制和兼容问题。这里记录一下实现过程。&lt;/p&gt;
    
    </summary>
    
      <category term="HTML" scheme="http://liuxianyu.cn/categories/HTML/"/>
    
      <category term="Audio" scheme="http://liuxianyu.cn/categories/HTML/Audio/"/>
    
    
      <category term="HTML" scheme="http://liuxianyu.cn/tags/HTML/"/>
    
      <category term="Audio" scheme="http://liuxianyu.cn/tags/Audio/"/>
    
  </entry>
  
  <entry>
    <title>使用 CSS 绘制内外不同圆角的矩形、钝角三角形</title>
    <link href="http://liuxianyu.cn/article/css-rectangle-triangle.html"/>
    <id>http://liuxianyu.cn/article/css-rectangle-triangle.html</id>
    <published>2019-12-20T14:59:49.000Z</published>
    <updated>2019-12-20T14:59:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p>最近做的项目中 UI 同学给了个内外不同圆角的矩形和钝角三角形的设计，这里记录一下完成过程。</p><a id="more"></a><h3 id="一-实现效果"><a class="header-anchor" href="#一-实现效果">¶</a>一、实现效果</h3><p>矩形内部圆角和外部圆角不一致，钝角三角形上不完全覆盖另一个钝角三角形的图案，且两个钝角处圆润程度不一致。<br>前期项目赶时间的时候用直角三角形实现了，本着不偷工减料及钻研的态度，利用<code>伪类</code>按照设计图实现了一下。蓝色为设计图部分，绿色为实现部分。</p><p><img src="/images/posts/CSS-rectangle-triangle/7.png" alt></p><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/posts/CSS-rectangle-triangle/1.png" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/posts/CSS-rectangle-triangle/2.png" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/posts/CSS-rectangle-triangle/3.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/posts/CSS-rectangle-triangle/4.png" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/posts/CSS-rectangle-triangle/5.png" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/posts/CSS-rectangle-triangle/6.png" alt></div></div></div></div><h3 id="二-矩形代码"><a class="header-anchor" href="#二-矩形代码">¶</a>二、矩形代码</h3><p>具体实现代码可参考：<a href="https://github.com/liuxy0551/vue-cli3-build-optimization/blob/master/src/pages/css/rectangle.vue" target="_blank" rel="noopener">rectangle.vue</a></p><p>1、HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rectangle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.rectangle</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  &amp;:before, &amp;:after &#123;</span><br><span class="line">    content: '';</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">325px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">180px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#41b883</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">305px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">160px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-钝角三角形代码"><a class="header-anchor" href="#三-钝角三角形代码">¶</a>三、钝角三角形代码</h3><p>具体实现代码可参考：<a href="https://github.com/liuxy0551/vue-cli3-build-optimization/blob/master/src/pages/css/triangle.vue" target="_blank" rel="noopener">triangle.vue</a></p><p>1、HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"triangle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">90px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  &amp;:before, &amp;:after &#123;</span><br><span class="line">    content: '';</span><br><span class="line">    <span class="selector-tag">width</span>: 50<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">height</span>: 50<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line">    <span class="selector-tag">transform</span>: <span class="selector-tag">scaleY</span>(1<span class="selector-class">.3</span>) <span class="selector-tag">translate</span>(30%, <span class="selector-tag">-30px</span>) <span class="selector-tag">rotate</span>(45<span class="selector-tag">deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">7px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">59px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#41b883</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">7px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">59px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-气泡对话框"><a class="header-anchor" href="#四-气泡对话框">¶</a>四、气泡对话框</h3><p>具体实现代码可参考：<a href="https://github.com/liuxy0551/vue-cli3-build-optimization/blob/master/src/pages/css/bubble.vue" target="_blank" rel="noopener">bubble.vue</a></p><p><img src="/images/posts/CSS-rectangle-triangle/7.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#介绍&quot;&gt;¶&lt;/a&gt;介绍&lt;/h2&gt;
&lt;p&gt;最近做的项目中 UI 同学给了个内外不同圆角的矩形和钝角三角形的设计，这里记录一下完成过程。&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://liuxianyu.cn/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://liuxianyu.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>在 VMware 中安装体验 UOS</title>
    <link href="http://liuxianyu.cn/article/vmware-uos.html"/>
    <id>http://liuxianyu.cn/article/vmware-uos.html</id>
    <published>2019-12-17T17:01:26.000Z</published>
    <updated>2019-12-17T17:01:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p>最近看到国产系统<code>UOS</code>在进行内测，以诚恳的言辞申请并加入了内测，这里有一些虚拟机的体验截图。</p><a id="more"></a><p>官网：<a href="https://www.chinauos.com/" target="_blank" rel="noopener">https://www.chinauos.com/</a>。</p><p>简单体验十几分钟后，有以下几点感受：</p><ul><li>1、随处可见的 deepin 标记</li><li>2、左下角抽屉有 Windows 的痕迹，展开抽屉有 MacOS 的痕迹</li><li>3、展开抽屉后滚动时不是很流畅，这对于天天与电脑打交道的人来说很难受</li><li>4、终端不是很美观</li><li>5、应用商店似乎还是不能用的</li><li>6、文件管理器文件夹之间的大小有点不太合适</li><li>7、设置中的各个模块长的似乎是为了在平板上看着舒服点</li><li>8、毛玻璃效果我很喜欢</li></ul><p>总结来说：国产系统<code>任重道远</code>，加油。</p><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/posts/vmware-uos/1.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="/images/posts/vmware-uos/2.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/posts/vmware-uos/3.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="/images/posts/vmware-uos/4.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/posts/vmware-uos/5.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="/images/posts/vmware-uos/6.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/posts/vmware-uos/7.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="/images/posts/vmware-uos/8.png" alt></div></div></div></div><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/posts/vmware-uos/9.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="/images/posts/vmware-uos/10.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/posts/vmware-uos/11.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="/images/posts/vmware-uos/12.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/posts/vmware-uos/13.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="/images/posts/vmware-uos/14.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/posts/vmware-uos/15.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="/images/posts/vmware-uos/16.png" alt></div></div></div></div><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/posts/vmware-uos/17.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="/images/posts/vmware-uos/18.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/posts/vmware-uos/19.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="/images/posts/vmware-uos/20.png" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/posts/vmware-uos/21.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="/images/posts/vmware-uos/22.png" alt></div></div><div class="group-picture-row"></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#介绍&quot;&gt;¶&lt;/a&gt;介绍&lt;/h2&gt;
&lt;p&gt;最近看到国产系统&lt;code&gt;UOS&lt;/code&gt;在进行内测，以诚恳的言辞申请并加入了内测，这里有一些虚拟机的体验截图。&lt;/p&gt;
    
    </summary>
    
      <category term="VMware" scheme="http://liuxianyu.cn/categories/VMware/"/>
    
      <category term="UOS" scheme="http://liuxianyu.cn/categories/VMware/UOS/"/>
    
    
      <category term="VMware" scheme="http://liuxianyu.cn/tags/VMware/"/>
    
      <category term="UOS" scheme="http://liuxianyu.cn/tags/UOS/"/>
    
  </entry>
  
  <entry>
    <title>前端项目优化之旅（五）—— Vue 路由懒加载</title>
    <link href="http://liuxianyu.cn/article/vue-cli3-router-load-lazy.html"/>
    <id>http://liuxianyu.cn/article/vue-cli3-router-load-lazy.html</id>
    <published>2019-12-06T11:34:19.000Z</published>
    <updated>2019-12-06T11:34:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p><code>前端项目优化之旅</code>系列随笔主要记录工作中遇到的一些优化方案，这里记录一下 Vue 中的路由懒加载</p><a id="more"></a><h3 id="一-为什么"><a class="header-anchor" href="#一-为什么">¶</a>一、为什么</h3><p>打包构建后，运用 webpack 打包后的文件变得非常大，在用户进入首页时，需要加载整个项目的资源，时间过长。即使做了 loading 或者骨架屏也不利于用户体验。</p><h3 id="二-怎么办"><a class="header-anchor" href="#二-怎么办">¶</a>二、怎么办</h3><p>如果能把不同路由对应的组件分割成不同的代码块，在路由被访问时才加载对应组件，能有效减小首页的加载压力。</p><p><code>router.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>: <span class="string">'/element'</span>, <span class="attr">name</span>: <span class="string">'Element'</span>, <span class="attr">component</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../src/pages/element'</span>) &#125;                          <span class="comment">// 未使用懒加载</span></span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">'/element'</span>, <span class="attr">name</span>: <span class="string">'Element'</span>, <span class="attr">component</span>: <span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123; <span class="built_in">require</span>([<span class="string">'../src/pages/element'</span>], resolve) &#125;&#125;    <span class="comment">// 使用懒加载</span></span><br></pre></td></tr></table></figure><p>在 Vue CLI 3 中我们还需要多做一步。因为 Vue CLI 3 默认开始了<code>prefetch</code>（预加载模块），用来告诉浏览器在页面加载完成后，利用空闲时间提前获取用户未来可能会访问的内容。所以要关闭这个功能，在<code>vue.config.js</code>中设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 移除 prefetch 插件</span></span><br><span class="line">    config.plugins.delete(<span class="string">'prefetch'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 或者</span></span><br><span class="line">    <span class="comment">// 修改 prefetch 的选项：</span></span><br><span class="line">    config.plugin(<span class="string">'prefetch'</span>).tap(<span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">      options[<span class="number">0</span>].fileBlacklist = options[<span class="number">0</span>].fileBlacklist || []</span><br><span class="line">      options[<span class="number">0</span>].fileBlacklist.push(<span class="regexp">/myasyncRoute(.)+?\.js$/</span>)</span><br><span class="line">      <span class="keyword">return</span> options</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当<code>prefetch</code>插件被禁用时，可以通过 webpack 的内联注释手动选定要提前获取的代码区块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>: <span class="string">'/element'</span>, <span class="attr">name</span>: <span class="string">'Element'</span>, <span class="attr">component</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackPrefetch: true */</span> <span class="string">'../src/pages/element'</span>) &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#介绍&quot;&gt;¶&lt;/a&gt;介绍&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;前端项目优化之旅&lt;/code&gt;系列随笔主要记录工作中遇到的一些优化方案，这里记录一下 Vue 中的路由懒加载&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://liuxianyu.cn/categories/Vue/"/>
    
      <category term="懒加载" scheme="http://liuxianyu.cn/categories/Vue/%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    
    
      <category term="Vue" scheme="http://liuxianyu.cn/tags/Vue/"/>
    
      <category term="懒加载" scheme="http://liuxianyu.cn/tags/%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>前端项目优化之旅（四）—— Element 按需引入组件</title>
    <link href="http://liuxianyu.cn/article/vue-cli3-element-load-on-demand.html"/>
    <id>http://liuxianyu.cn/article/vue-cli3-element-load-on-demand.html</id>
    <published>2019-12-05T19:04:17.000Z</published>
    <updated>2019-12-05T19:04:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p><code>前端项目优化之旅</code>系列随笔主要记录工作中遇到的一些优化方案，这里记录一下 Vue CLI 3 项目中如何让 Element 按需引入组件</p><a id="more"></a><h3 id="一-安装-element"><a class="header-anchor" href="#一-安装-element">¶</a>一、安装 Element</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure><h3 id="二-完整引入"><a class="header-anchor" href="#二-完整引入">¶</a>二、完整引入</h3><p>在 main.js 中写入以下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class="line">Vue.use(ElementUI)</span><br></pre></td></tr></table></figure><p><img src="/images/posts/vue-cli3-element-load-on-demand/1.png" alt></p><h3 id="三-按需引入"><a class="header-anchor" href="#三-按需引入">¶</a>三、按需引入</h3><p>1、在<code>src/components</code>下新建<code>element.js</code>文件，具体代码见 <a href="https://github.com/liuxy0551/vue-cli3-build-optimization/blob/master/src/components/element.js" target="_blank" rel="noopener">src/components/element.js</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按需引入 Element 组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; Input, Select, Option &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">let</span> elementUIs = [Input, Select, Option]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  install (Vue) &#123;</span><br><span class="line">    elementUIs.forEach(<span class="function"><span class="params">elementUI</span> =&gt;</span> [</span><br><span class="line">      Vue.component(elementUI.name, elementUI)</span><br><span class="line">      <span class="comment">// Vue.use(elementUI)    // 也可以使用 Vue.use()</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、在<code>main.js</code>中引入<code>src/components/element.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> element <span class="keyword">from</span> <span class="string">'./components/element'</span></span><br><span class="line">Vue.use(element)</span><br></pre></td></tr></table></figure><p>3、页面使用组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input v-model.trim=<span class="string">"msg"</span> placeholder=<span class="string">"请输入，最长 20 位，无空格"</span> maxlength=<span class="string">"20"</span> clearable&gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="/images/posts/vue-cli3-element-load-on-demand/2.png" alt></p><ul><li>主要体现在 element 文件大小减少了约<code>1.5 MB</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#介绍&quot;&gt;¶&lt;/a&gt;介绍&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;前端项目优化之旅&lt;/code&gt;系列随笔主要记录工作中遇到的一些优化方案，这里记录一下 Vue CLI 3 项目中如何让 Element 按需引入组件&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://liuxianyu.cn/categories/Vue/"/>
    
      <category term="Element" scheme="http://liuxianyu.cn/categories/Vue/Element/"/>
    
    
      <category term="Vue" scheme="http://liuxianyu.cn/tags/Vue/"/>
    
      <category term="Element" scheme="http://liuxianyu.cn/tags/Element/"/>
    
  </entry>
  
  <entry>
    <title>前端项目优化之旅（三）—— Lodash 单独引入函数</title>
    <link href="http://liuxianyu.cn/article/vue-cli3-lodash.html"/>
    <id>http://liuxianyu.cn/article/vue-cli3-lodash.html</id>
    <published>2019-12-04T20:39:58.000Z</published>
    <updated>2019-12-04T20:39:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p><code>前端项目优化之旅</code>系列随笔主要记录工作中遇到的一些优化方案，这里记录一下在 Vue CLI 3 项目中单独引用 Lodash 函数。</p><a id="more"></a><h3 id="一-安装-lodash"><a class="header-anchor" href="#一-安装-lodash">¶</a>一、安装 lodash</h3><p><a href="https://www.lodashjs.com/docs/latest" target="_blank" rel="noopener">Lodash</a> 经常用来处理一些复杂的数据逻辑，比如常见的：数组去重、数组删除元素等等，可以有效减少项目中的复杂逻辑代码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i lodash -S</span><br></pre></td></tr></table></figure><h3 id="二-完全引入-lodash"><a class="header-anchor" href="#二-完全引入-lodash">¶</a>二、完全引入 lodash</h3><p>举例：拆分数组（生成二维数组）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line"></span><br><span class="line">_.chunk([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], <span class="number">2</span>)</span><br><span class="line"><span class="comment">// =&gt; [['a', 'b'], ['c', 'd']]</span></span><br></pre></td></tr></table></figure><p><img src="/images/posts/vue-cli3-lodash/1.png" alt></p><h3 id="三-单独引入-lodash-推荐"><a class="header-anchor" href="#三-单独引入-lodash-推荐">¶</a>三、单独引入 lodash <code>推荐</code></h3><p>举例：拆分数组（生成二维数组）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chunk <span class="keyword">from</span> <span class="string">'lodash/chunk'</span></span><br><span class="line"></span><br><span class="line">chunk([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], <span class="number">2</span>)</span><br><span class="line"><span class="comment">// =&gt; [['a', 'b'], ['c', 'd']]</span></span><br></pre></td></tr></table></figure><p><img src="/images/posts/vue-cli3-lodash/2.png" alt></p><ul><li>主要体现在 element 文件大小减少了约<code>550+ KB</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#介绍&quot;&gt;¶&lt;/a&gt;介绍&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;前端项目优化之旅&lt;/code&gt;系列随笔主要记录工作中遇到的一些优化方案，这里记录一下在 Vue CLI 3 项目中单独引用 Lodash 函数。&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://liuxianyu.cn/categories/Vue/"/>
    
      <category term="Lodash" scheme="http://liuxianyu.cn/categories/Vue/Lodash/"/>
    
    
      <category term="Vue" scheme="http://liuxianyu.cn/tags/Vue/"/>
    
      <category term="Lodash" scheme="http://liuxianyu.cn/tags/Lodash/"/>
    
  </entry>
  
  <entry>
    <title>前端项目优化之旅（二）—— Vant 自动按需引入组件</title>
    <link href="http://liuxianyu.cn/article/vue-cli3-vant-load-on-demand.html"/>
    <id>http://liuxianyu.cn/article/vue-cli3-vant-load-on-demand.html</id>
    <published>2019-12-03T11:21:21.000Z</published>
    <updated>2019-12-03T11:21:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p><code>前端项目优化之旅</code>系列随笔主要记录工作中遇到的一些优化方案，这里记录一下 Vue CLI 3 项目中如何让 Vant 自动按需引入组件</p><a id="more"></a><h3 id="一-安装-vant"><a class="header-anchor" href="#一-安装-vant">¶</a>一、安装 Vant</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vant -S</span><br></pre></td></tr></table></figure><h3 id="二-完整引入"><a class="header-anchor" href="#二-完整引入">¶</a>二、完整引入</h3><p>在 main.js 中写入以下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vant <span class="keyword">from</span> <span class="string">'vant'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'vant/lib/index.css'</span></span><br><span class="line">Vue.use(Vant)</span><br></pre></td></tr></table></figure><p><img src="/images/posts/vue-cli3-vant-load-on-demand/1.png" alt></p><h3 id="三-自动按需引入组件推荐"><a class="header-anchor" href="#三-自动按需引入组件推荐">¶</a>三、自动按需引入组件<code>推荐</code></h3><p>1、<a href="https://github.com/ant-design/babel-plugin-import" target="_blank" rel="noopener">babel-plugin-import</a> 是一款 babel 插件，它能在编译的过程中将 import 写法自动转换为按需引入的方式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-plugin-import -D</span><br></pre></td></tr></table></figure><p>2、babel 7 在<code>babel.config.js</code>中配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 自动按需引入 Vant 组件</span></span><br><span class="line">  plugins: [</span><br><span class="line">    [<span class="string">'import'</span>, &#123; <span class="attr">libraryName</span>: <span class="string">'vant'</span>, <span class="attr">libraryDirectory</span>: <span class="string">'es'</span>, <span class="attr">style</span>: <span class="literal">true</span> &#125;, <span class="string">'vant'</span>]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、在<code>src/components</code>下新建<code>vant.js</code>文件，具体代码见 <a href="https://github.com/liuxy0551/vue-cli3-build-optimization/blob/master/src/components/vant.js" target="_blank" rel="noopener">src/components/vant.js</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动按需引入 Vant 组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; Tabbar, TabbarItem, Button &#125; <span class="keyword">from</span> <span class="string">'vant'</span></span><br><span class="line"><span class="keyword">let</span> vantUIs = [Tabbar, TabbarItem, Button]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  install (Vue) &#123;</span><br><span class="line">    vantUIs.forEach(<span class="function"><span class="params">vantUI</span> =&gt;</span> [</span><br><span class="line">      Vue.component(vantUI.name, vantUI)</span><br><span class="line">      <span class="comment">// Vue.use(vantUI)    // 也可以使用 Vue.use()</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、在<code>main.js</code>中引入<code>src/components/vant.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vant <span class="keyword">from</span> <span class="string">'./components/vant'</span></span><br><span class="line">Vue.use(vant)</span><br></pre></td></tr></table></figure><p>5、页面使用组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-button type=<span class="string">"default"</span>&gt;默认按钮&lt;<span class="regexp">/van-button&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/posts/vue-cli3-vant-load-on-demand/2.png" alt></p><ul><li>主要体现在 vant 文件大小减少了约<code>384 KB</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#介绍&quot;&gt;¶&lt;/a&gt;介绍&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;前端项目优化之旅&lt;/code&gt;系列随笔主要记录工作中遇到的一些优化方案，这里记录一下 Vue CLI 3 项目中如何让 Vant 自动按需引入组件&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://liuxianyu.cn/categories/Vue/"/>
    
      <category term="Vant" scheme="http://liuxianyu.cn/categories/Vue/Vant/"/>
    
    
      <category term="Vue" scheme="http://liuxianyu.cn/tags/Vue/"/>
    
      <category term="Vant" scheme="http://liuxianyu.cn/tags/Vant/"/>
    
  </entry>
  
  <entry>
    <title>前端项目优化之旅（一）—— 分析插件</title>
    <link href="http://liuxianyu.cn/article/vue-cli3-analyzer.html"/>
    <id>http://liuxianyu.cn/article/vue-cli3-analyzer.html</id>
    <published>2019-12-02T13:06:10.000Z</published>
    <updated>2019-12-02T13:06:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p>上个月有好几个项目需要部署上线，其中有一个项目需要在钉钉第三方应用市场上线，而钉钉对于页面性能、白屏率等有硬性要求，所以对这个项目做了很多打包优化。<br><code>前端项目优化之旅</code>将以基于 Vue CLI 3 新写的 <a href="https://github.com/liuxy0551/vue-cli3-build-optimization" target="_blank" rel="noopener">vue-cli3-build-optimization</a> 作为记录对象，记录一些优化方法：</p><a id="more"></a><h3 id="分析工具"><a class="header-anchor" href="#分析工具">¶</a>分析工具</h3><p>在优化之前，我们需要知道项目构建后，哪里显得臃肿、哪些文件过大、哪些可以删除等等。这个时候，可视化的分析工具就显得很重要了。</p><h4 id="1-安装分析插件"><a class="header-anchor" href="#1-安装分析插件">¶</a>1、安装分析插件</h4><p>安装<code>webpack-bundle-analyzer</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack-bundle-analyzer -D</span><br></pre></td></tr></table></figure><p>有以下两种配置方案，推荐第一种</p><h4 id="2-运行指定命令查看推荐"><a class="header-anchor" href="#2-运行指定命令查看推荐">¶</a>2、运行指定命令查看<code>推荐</code></h4><p>将分析插件作为一个独立的 script，在<code>package.json -&gt; scripts</code>中添加一行<code>&quot;analyzer&quot;: &quot;use_analyzer=true npm run serve&quot;</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package.json</span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"analyzer"</span>: <span class="string">"use_analyzer=true npm run serve"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 vue.config.js 中对 webpack 进行配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.use_analyzer) &#123;</span><br><span class="line">      config</span><br><span class="line">        .plugin(<span class="string">'webpack-bundle-analyzer'</span>)</span><br><span class="line">        .use(<span class="built_in">require</span>(<span class="string">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样只会在使用以下命令时才会自动打开浏览器并访问 <a href="http://127.0.0.1:8888/" target="_blank" rel="noopener">http://127.0.0.1:8888</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run analyzer</span><br></pre></td></tr></table></figure><h4 id="3-运行即查看"><a class="header-anchor" href="#3-运行即查看">¶</a>3、运行即查看</h4><p>在 vue.config.js 中对 webpack 进行配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config</span><br><span class="line">      .plugin(<span class="string">'webpack-bundle-analyzer'</span>)</span><br><span class="line">      .use(<span class="built_in">require</span>(<span class="string">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下运行<code>npm run serve</code>即可，会自动打开浏览器并访问 <a href="http://127.0.0.1:8888/" target="_blank" rel="noopener">http://127.0.0.1:8888</a></p><p><img src="/images/posts/vue-cli3-analyzer/2.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#介绍&quot;&gt;¶&lt;/a&gt;介绍&lt;/h2&gt;
&lt;p&gt;上个月有好几个项目需要部署上线，其中有一个项目需要在钉钉第三方应用市场上线，而钉钉对于页面性能、白屏率等有硬性要求，所以对这个项目做了很多打包优化。&lt;br&gt;
&lt;code&gt;前端项目优化之旅&lt;/code&gt;将以基于 Vue CLI 3 新写的 &lt;a href=&quot;https://github.com/liuxy0551/vue-cli3-build-optimization&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue-cli3-build-optimization&lt;/a&gt; 作为记录对象，记录一些优化方法：&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://liuxianyu.cn/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://liuxianyu.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中常见的一些方法</title>
    <link href="http://liuxianyu.cn/article/js-functions.html"/>
    <id>http://liuxianyu.cn/article/js-functions.html</id>
    <published>2019-11-30T13:43:38.000Z</published>
    <updated>2019-11-30T13:43:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p>最近在加强 JavaScript 基础的学习，这里整理了一下 JavaScript 中 String 对象和 Array 对象常见的一些方法。</p><a id="more"></a><h3 id="一-string-对象"><a class="header-anchor" href="#一-string-对象">¶</a>一、String 对象</h3><h4 id="1-indexof"><a class="header-anchor" href="#1-indexof">¶</a>1、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf" target="_blank" rel="noopener">indexOf()</a></h4><p><code>indexOf()</code>方法返回调用它的 String 对象中<code>第一次</code>出现的指定值的索引，从 fromIndex 处进行搜索，如果未找到该值，则返回 -1。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.indexOf(searchValue)</span><br><span class="line">str.indexOf(searchValue, fromIndex)</span><br></pre></td></tr></table></figure><h4 id="2-includes"><a class="header-anchor" href="#2-includes">¶</a>2、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/includes" target="_blank" rel="noopener">includes()</a></h4><p><code>includes()</code>方法用于判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false。<code>区分大小写</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.includes(searchString)</span><br><span class="line">str.includes(searchString, fromIndex)</span><br></pre></td></tr></table></figure><h4 id="3-replace"><a class="header-anchor" href="#3-replace">¶</a>3、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="noopener">replace()</a></h4><p><code>replace()</code>方法用于替换字符串中的某些字符，返回值是一个部分或全部匹配由替代模式所取代的新的字符串。</p><p><code>语法：</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.replace(regexp|substr, newSubStr|<span class="function"><span class="keyword">function</span>)</span></span><br></pre></td></tr></table></figure><ul><li>regexp（pattern）：一个RegExp 对象或者其字面量，该正则所匹配的内容<code>全部都会被第二个参数的返回值替换</code>。</li><li>substr（pattern）：一个将被 newSubStr 替换的字符串，<code>仅第一个匹配项会被替换</code>。</li><li>newSubStr（replacement）：用于替换掉第一个参数在原字符串中匹配到的字符串。</li><li>function（replacement）：一个用来创建新字符串的函数，该函数的返回值将替换第一个参数匹配到的字符串。</li></ul><p><code>举例：</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="string">'The quick brown fox jumps over the lazy dog. If the dog reacted, was it really lazy?'</span></span><br><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/dog/gi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p.replace(regex, <span class="string">'ferret'</span>))     <span class="comment">// "The quick brown fox jumps over the lazy ferret. If the ferret reacted, was it really lazy?"</span></span><br><span class="line"><span class="built_in">console</span>.log(p.replace(<span class="string">'dog'</span>, <span class="string">'monkey'</span>))     <span class="comment">// "The quick brown fox jumps over the lazy monkey. If the dog reacted, was it really lazy?"</span></span><br></pre></td></tr></table></figure><h4 id="4-slice"><a class="header-anchor" href="#4-slice">¶</a>4、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/slice" target="_blank" rel="noopener">slice()</a></h4><p><code>slice()</code>方法提取某个字符串的一部分，并返回一个新的字符串，且不会改动原字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.slice(beginIndex)</span><br><span class="line">str.slice(beginIndex, endIndex)</span><br></pre></td></tr></table></figure><h4 id="5-split"><a class="header-anchor" href="#5-split">¶</a>5、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split" target="_blank" rel="noopener">split()</a></h4><p><code>split()</code>方法使用指定的字符串将一个 String 对象分割成字符串数组，这个指定的字符串作为分隔符来决定每个拆分的位置，返回源字符串以分隔符出现位置分隔而成的一个数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.split(separator)</span><br><span class="line">str.split(separator, limit)</span><br></pre></td></tr></table></figure><ul><li>separator：分隔符，可以是一个字符串或者正则表达式</li><li>limit：返回值数组的长度</li></ul><h4 id="6-substr"><a class="header-anchor" href="#6-substr">¶</a>6、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substr" target="_blank" rel="noopener">substr()</a></h4><p><code>substr()</code>方法返回一个字符串中从指定位置开始到指定字符数的字符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.substr(beginIndex)</span><br><span class="line">str.substr(beginIndex, length)</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong></p><ul><li><strong>建议使用 substring()</strong></li></ul></blockquote><h4 id="7-substring"><a class="header-anchor" href="#7-substring">¶</a>7、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substring" target="_blank" rel="noopener">substring()</a></h4><p><code>substring()</code>方法返回一个字符串从开始索引直到字符串末尾的一个子集, 或从开始索引到结束索引（不包含结束索引）之间的一个子集。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.substring(beginIndex)</span><br><span class="line">str.substring(beginIndex, endIndex)        <span class="comment">// [beginIndex, endIndex)</span></span><br></pre></td></tr></table></figure><h3 id="二-array-对象"><a class="header-anchor" href="#二-array-对象">¶</a>二、Array 对象</h3><h4 id="1-isarray"><a class="header-anchor" href="#1-isarray">¶</a>1、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray" target="_blank" rel="noopener">isArray()</a></h4><p><code>Array.isArray()</code>用于确定传递的值是否是一个 Array。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])            <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(&#123; <span class="attr">foo</span>: <span class="number">123</span> &#125;)         <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="string">"foobar"</span>)             <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">undefined</span>)            <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>当检测Array实例时, Array.isArray 优于 instanceof，因为 Array.isArray 能检测 iframes。</li></ul><h4 id="2-concat"><a class="header-anchor" href="#2-concat">¶</a>2、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat" target="_blank" rel="noopener">concat()</a></h4><p><code>concat()</code>方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr1.concat(arr2, arr3, ...)</span><br></pre></td></tr></table></figure><h4 id="3-every"><a class="header-anchor" href="#3-every">¶</a>3、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/every" target="_blank" rel="noopener">every()</a></h4><p><code>every()</code>方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">130</span>, <span class="number">44</span>]</span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">130</span>, <span class="number">44</span>]</span><br><span class="line"></span><br><span class="line">arr1.every(<span class="function"><span class="params">i</span> =&gt;</span> i &gt;= <span class="number">10</span>)            <span class="comment">// false</span></span><br><span class="line">arr2.every(<span class="function"><span class="params">i</span> =&gt;</span> i &gt;= <span class="number">10</span>)            <span class="comment">// true</span></span><br><span class="line">arr3.every(<span class="function">(<span class="params">i, index, array</span>) =&gt;</span> &#123; <span class="keyword">return</span> i &gt;= <span class="number">20</span> &#125;)            <span class="comment">// false</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong></p><ul><li><strong>1、若收到一个空数组，此方法在任何情况下都会返回 true</strong></li><li><strong>2、可接收第二个参数，执行第一个函数时的 this</strong></li></ul></blockquote><h4 id="4-filter"><a class="header-anchor" href="#4-filter">¶</a>4、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">filter()</a></h4><p><code>filter()</code>方法创建一个新数组, 包含了通过测试函数的所有元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">130</span>, <span class="number">44</span>]</span><br><span class="line"></span><br><span class="line">arr1.filter(<span class="function"><span class="params">i</span> =&gt;</span> i &gt;= <span class="number">10</span>)            <span class="comment">// [12, 130, 44]</span></span><br><span class="line">arr2.filter(<span class="function">(<span class="params">i, index, array</span>) =&gt;</span> i &gt;= <span class="number">10</span>)            <span class="comment">// [12, 130, 44]</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong></p><ul><li><strong>可接收第二个参数，执行第一个函数时的 this</strong></li></ul></blockquote><h4 id="5-flat"><a class="header-anchor" href="#5-flat">¶</a>5、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" target="_blank" rel="noopener">flat()</a></h4><p><code>flat()</code>方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">arr1.flat()             <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]]</span><br><span class="line">arr2.flat()             <span class="comment">// [1, 2, 3, 4, [5, 6]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]]</span><br><span class="line">arr3.flat(<span class="number">2</span>)            <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 Infinity，可展开任意深度的嵌套数组</span></span><br><span class="line"><span class="keyword">let</span> arr4 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, [<span class="number">7</span>, <span class="number">8</span>, [<span class="number">9</span>, <span class="number">10</span>]]]]]</span><br><span class="line">arr4.flat(<span class="literal">Infinity</span>)     <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr5 = [<span class="number">1</span>, <span class="number">2</span>, , <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">arr4.flat()             <span class="comment">// [1, 2, 4, 5]</span></span><br></pre></td></tr></table></figure><h4 id="6-foreach"><a class="header-anchor" href="#6-foreach">¶</a>6、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener">forEach()</a></h4><p><code>forEach()</code>方法对数组的每个元素执行一次提供的函数。</p><blockquote><p><strong>注意</strong></p><ul><li><strong>无法跳出循环</strong></li></ul></blockquote><h4 id="7-includes"><a class="header-anchor" href="#7-includes">¶</a>7、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" target="_blank" rel="noopener">includes()</a></h4><p><code>includes()</code>方法用来判断一个数组是否包含一个指定的值，包含则返回 true，反之返回 false。</p><h4 id="8-indexof"><a class="header-anchor" href="#8-indexof">¶</a>8、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf" target="_blank" rel="noopener">indexOf()</a></h4><p><code>indexOf()</code>方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回 -1。</p><h4 id="9-join"><a class="header-anchor" href="#9-join">¶</a>9、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join" target="_blank" rel="noopener">join()</a></h4><p><code>join()</code>方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。</p><h4 id="10-map"><a class="header-anchor" href="#10-map">¶</a>10、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener">map()</a></h4><p><code>map()</code>方法创建一个新数组，其结果是该数组中的每个元素都调用执行函数后返回的结果。</p><h4 id="11-pop"><a class="header-anchor" href="#11-pop">¶</a>11、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/pop" target="_blank" rel="noopener">pop()</a></h4><p><code>pop()</code>方法从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。</p><h4 id="12-push"><a class="header-anchor" href="#12-push">¶</a>12、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank" rel="noopener">push()</a></h4><p><code>push()</code>方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度。此方法更改数组的长度。</p><h4 id="13-shift"><a class="header-anchor" href="#13-shift">¶</a>13、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/shift" target="_blank" rel="noopener">shift()</a></h4><p><code>shift()</code>方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。</p><h4 id="14-unshift"><a class="header-anchor" href="#14-unshift">¶</a>14、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift" target="_blank" rel="noopener">unshift()</a></h4><p><code>unshift()</code>方法将一个或多个元素添加到数组的开头，并返回该数组的新长度。此方法更改数组的长度。</p><h4 id="15-slice"><a class="header-anchor" href="#15-slice">¶</a>15、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">slice()</a></h4><p><code>slice()</code>方法返回一个新的数组对象，这一数组对象是由 beginIndex 和 endIndex 决定的原数组的浅拷贝。原始数组不会被改变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.slice()</span><br><span class="line">arr.slice(beginIndex)</span><br><span class="line">arr.slice(beginIndex, endIndex)        <span class="comment">// [beginIndex, endIndex)</span></span><br></pre></td></tr></table></figure><ul><li>如果 beginIndex 大于数组的长度，则返回空数组</li><li>slice(-2) 表示提取数组中的倒数第二个元素到最后一个元素（包含最后一个元素）</li><li>slice(-2, -1) 表示提取数组中的倒数第二个元素到最后一个元素（不包含最后一个元素）</li></ul><h4 id="16-some"><a class="header-anchor" href="#16-some">¶</a>16、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some" target="_blank" rel="noopener">some()</a></h4><p><code>some()</code>方法测试数组中是不是至少有一个元素通过了测试函数，返回一个 Boolean 类型的值。</p><blockquote><p><strong>注意</strong></p><ul><li><strong>1、若收到一个空数组，此方法在任何情况下都会返回 false</strong></li><li><strong>2、可接收第二个参数，执行第一个函数时的 this</strong></li></ul></blockquote><h4 id="17-splice"><a class="header-anchor" href="#17-splice">¶</a>17、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener">splice()</a></h4><p><code>splice()</code>方法通过删除或替换现有元素或者原地添加新的元素来修改数组，并以数组形式返回被修改的内容。此方法会改变原数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.splice(beginIndex, deleteCount, item1, item2, ...)</span><br></pre></td></tr></table></figure><h4 id="18-reverse"><a class="header-anchor" href="#18-reverse">¶</a>18、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse" target="_blank" rel="noopener">reverse()</a></h4><p><code>reverse()</code>方法将数组中元素的位置颠倒，并返回该数组。此方法会改变原数组。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#介绍&quot;&gt;¶&lt;/a&gt;介绍&lt;/h2&gt;
&lt;p&gt;最近在加强 JavaScript 基础的学习，这里整理了一下 JavaScript 中 String 对象和 Array 对象常见的一些方法。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://liuxianyu.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://liuxianyu.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中的数据类型以及内存分配</title>
    <link href="http://liuxianyu.cn/article/js-typeof.html"/>
    <id>http://liuxianyu.cn/article/js-typeof.html</id>
    <published>2019-11-30T12:59:54.000Z</published>
    <updated>2019-11-30T12:59:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p>最近在加强 JavaScript 基础的学习，这里整理了一下 JavaScript 中的数据类型以及内存分配。</p><a id="more"></a><h3 id="一-数据类型"><a class="header-anchor" href="#一-数据类型">¶</a>一、数据类型</h3><h4 id="1-简单类型"><a class="header-anchor" href="#1-简单类型">¶</a>1、简单类型</h4><p>简单类型又叫做基本数据类型或者值类型，在存储时变量中存储的是值本身。</p><ul><li>String, Number, Boolean, undefined, null（null 为空对象）</li></ul><h4 id="2-复杂类型"><a class="header-anchor" href="#2-复杂类型">¶</a>2、复杂类型</h4><p>复杂类型又叫做引用类型，在存储时变量中存储的是地址（引用）。</p><ul><li>通过 new 关键字创建的对象（系统对象、自定义对象），如：Object、Array、Date 等</li></ul><h3 id="二-堆和栈"><a class="header-anchor" href="#二-堆和栈">¶</a>二、堆和栈</h3><h4 id="1-栈-操作系统"><a class="header-anchor" href="#1-栈-操作系统">¶</a>1、栈（操作系统）</h4><p>由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈，<code>简单数据类型存放到栈里面</code>。</p><h4 id="2-堆-操作系统"><a class="header-anchor" href="#2-堆-操作系统">¶</a>2、堆（操作系统）</h4><p>存储复杂类型（对象），一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收释放，<code>复杂数据类型存放到堆里面</code>。<br>复杂数据类型首先在栈里面存放地址，十六进制表示，这个地址指向堆里面的数据，真正的对象实例存放在堆空间中。</p><blockquote><p><strong>注意</strong></p><ul><li><strong>JavaScript 中没有堆栈的概念，通过堆栈的方式，可以更好地理解代码的执行方式</strong></li></ul></blockquote><p><img src="/images/posts/js-typeof/1.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#介绍&quot;&gt;¶&lt;/a&gt;介绍&lt;/h2&gt;
&lt;p&gt;最近在加强 JavaScript 基础的学习，这里整理了一下 JavaScript 中的数据类型以及内存分配。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://liuxianyu.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://liuxianyu.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中的循环</title>
    <link href="http://liuxianyu.cn/article/js-xunhuan.html"/>
    <id>http://liuxianyu.cn/article/js-xunhuan.html</id>
    <published>2019-11-29T15:26:39.000Z</published>
    <updated>2019-11-29T15:26:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p>最近在加强 JavaScript 基础的学习，这里整理了一下 JavaScript 中的循环，包括：<code>for</code>、<code>while</code>、<code>do while</code>三种循环和<code>continue</code>、<code>break</code>两个关键字。</p><a id="more"></a><h3 id="一-for-循环"><a class="header-anchor" href="#一-for-循环">¶</a>一、for 循环</h3><ol><li>for 循环可以重复执行某些相同的代码</li><li>for 循环通过计数器可以重复执行些许不同的代码</li><li>for 循环可以重复执行某些操作，比如算术运算符加法操作</li><li>双重 for 循环，外层循环一次，内存 for 循环全部执行</li><li>for 循环是循环条件和数字直接相关的循环</li></ol><h3 id="二-while-循环"><a class="header-anchor" href="#二-while-循环">¶</a>二、while 循环</h3><p><code>while</code>语句可以在条件表达式为真的前提下，循环执行指定的一段代码，直到条件表达式不为真时结束循环。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">  <span class="comment">// 循环体代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>执行思路</code>：</p><ol><li>先执行条件表达式，如果为 true，则执行循环体代码；如果为 false，则退出循环，执行后续代码。</li><li>循环体代码执行一次后，程序会继续判断执行条件表达式，如果条件表达式结果仍为 true，则继续执行循环体代码，直到条件表达式的结果为 false，整个循环过程才会结束。</li></ol><p><code>举例</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (num &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(num)</span><br><span class="line">  num ++                <span class="comment">// 要进行计数器的更新，防止出现死循环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-do-while-循环"><a class="header-anchor" href="#三-do-while-循环">¶</a>三、do while 循环</h3><p><code>do while</code>语句是 while 语句的一个变体，该循环会先执行一次代码块，然后对条件表达式进行判断，如果条件表达式的结果为 true，就会重复执行循环体，否则退出循环。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="comment">// 循环体代码</span></span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式)</span><br></pre></td></tr></table></figure><p><code>执行思路</code>：</p><ol><li>先执行一次循环体代码</li><li>再执行条件表达式，如果条件表达式结果为 true，则继续执行循环体代码，如果条件表达式结果为 false，则退出循环，执行后续代码。</li></ol><p><code>举例</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(num)</span><br><span class="line">  num ++                <span class="comment">// 要进行计数器的更新，防止出现死循环</span></span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">100</span>)</span><br></pre></td></tr></table></figure><h3 id="四-continue"><a class="header-anchor" href="#四-continue">¶</a>四、continue</h3><p><code>continue</code>关键字用于立即<code>跳出本次循环，继续下一个循环</code>（本次循环体中 continue 之后的代码就会少执行一次）</p><p><code>举例</code>：求 1 ~ 100 之间，除了能被 7 整除之外的整数和</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i ++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">7</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">  &#125;</span><br><span class="line">  sum += i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum)        <span class="comment">// 4315</span></span><br></pre></td></tr></table></figure><h3 id="五-break"><a class="header-anchor" href="#五-break">¶</a>五、break</h3><p><code>break</code>关键字用于立即<code>跳出整个循环</code>（本次循环结束）</p><p><code>举例</code>：求 1 ~ 100 之间，除了能被 7 整除之外的整数和</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i ++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">  sum += i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum)        <span class="comment">// 6, 1 + 2 + 3 = 6</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#介绍&quot;&gt;¶&lt;/a&gt;介绍&lt;/h2&gt;
&lt;p&gt;最近在加强 JavaScript 基础的学习，这里整理了一下 JavaScript 中的循环，包括：&lt;code&gt;for&lt;/code&gt;、&lt;code&gt;while&lt;/code&gt;、&lt;code&gt;do while&lt;/code&gt;三种循环和&lt;code&gt;continue&lt;/code&gt;、&lt;code&gt;break&lt;/code&gt;两个关键字。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://liuxianyu.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://liuxianyu.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>使用 certbot 在 CentOS 中给 nginx 配置 https</title>
    <link href="http://liuxianyu.cn/article/centos-nginx-https.html"/>
    <id>http://liuxianyu.cn/article/centos-nginx-https.html</id>
    <published>2019-11-15T17:08:08.000Z</published>
    <updated>2019-11-15T17:08:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p>免费的 SSL 证书可以通过阿里云获取，也可以通过以下操作安装。这里只记录使用 certbot 在 CentOS 中给 nginx 配置 https：</p><a id="more"></a><p>先去 Certbot 官网 <a href="https://certbot.eff.org/" target="_blank" rel="noopener">https://certbot.eff.org/</a>，选择 nginx ，再选择 CentOS/RHEL 7，意思是在什么系统上使用什么 HTTP 服务器</p><p><img src="/images/posts/centos-nginx-https/1.png" alt></p><h4 id="1-查看服务器实例"><a class="header-anchor" href="#1-查看服务器实例">¶</a>1、查看服务器实例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /sys/devices/virtual/dmi/id/product_uuid</span><br></pre></td></tr></table></figure><p>如果没有 dmi 文件夹，就进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install dmidecode</span><br></pre></td></tr></table></figure><p>如果 UUID 是<code>ec2</code>开头，则需要运行以下两行指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install yum-utils</span><br><span class="line">sudo yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional</span><br></pre></td></tr></table></figure><h4 id="2-安装-certbot"><a class="header-anchor" href="#2-安装-certbot">¶</a>2、安装 Certbot</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y certbot python2-certbot-nginx</span><br></pre></td></tr></table></figure><h4 id="3-获取并安装-ssl-证书"><a class="header-anchor" href="#3-获取并安装-ssl-证书">¶</a>3、获取并安装 SSL 证书</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo certbot --nginx</span><br></pre></td></tr></table></figure><p><img src="/images/posts/centos-nginx-https/2.png" alt>报错如上，参考资料：<a href="https://stackoverflow.com/questions/46168364/certbot-importerror-no-module-named-requests-packages-urllib3" target="_blank" rel="noopener">Certbot :ImportError: No module named 'requests.packages.urllib3</a>，执行以下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install --upgrade --force-reinstall 'requests==2.6.0' urllib3</span><br></pre></td></tr></table></figure><p><img src="/images/posts/centos-nginx-https/3.png" alt>提示输入以下指令升级<code>pip</code>，可以不搭理。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>接下来重新运行<code>sudo certbot --nginx</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo certbot --nginx</span><br></pre></td></tr></table></figure><p>按照提示依次输入：<br>　　- 输入邮箱，用于接收紧急续订和安全通知邮件<br>　　- 输入 A，阅读并同意条款<br>　　- 输入 N，邮箱接收相关推广邮件，不需要<br>　　- 输入数字，选择部署的域名，多个域名用<code>,</code>隔开<br>　　- 输入数字，选择是否将 http 重定向到 https。1、无需重定向，2、重定向<br><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/posts/centos-nginx-https/4.png" alt></div><div class="group-picture-column" style="width: 50%;"><img src="/images/posts/centos-nginx-https/5.png" alt></div></div></div></div></p><h4 id="4-确定-certbot-正常运行"><a class="header-anchor" href="#4-确定-certbot-正常运行">¶</a>4、确定 Certbot 正常运行</h4><p>在浏览器输入域名，在 URL 栏确认是否有 🔒 图标</p><h4 id="5-设置自动续订"><a class="header-anchor" href="#5-设置自动续订">¶</a>5、设置自动续订</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "0 0,12 * * * root python -c 'import random; import time; time.sleep(random.random() * 3600)' &amp;&amp; certbot renew" | sudo tee -a /etc/crontab &gt; /dev/null</span><br></pre></td></tr></table></figure><p>可查看续订设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/crontab</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#介绍&quot;&gt;¶&lt;/a&gt;介绍&lt;/h2&gt;
&lt;p&gt;免费的 SSL 证书可以通过阿里云获取，也可以通过以下操作安装。这里只记录使用 certbot 在 CentOS 中给 nginx 配置 https：&lt;/p&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://liuxianyu.cn/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="服务器" scheme="http://liuxianyu.cn/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中的 Array</title>
    <link href="http://liuxianyu.cn/article/js-array.html"/>
    <id>http://liuxianyu.cn/article/js-array.html</id>
    <published>2019-11-13T09:56:49.000Z</published>
    <updated>2019-11-13T09:56:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p>最近在加强 JavaScript 基础的学习，这里整理一下 Array，主要是一些数组方法。</p><a id="more"></a><h3 id="一-扁平化多维数组"><a class="header-anchor" href="#一-扁平化多维数组">¶</a>一、扁平化多维数组</h3><p>这个知识点是在一次面试中被问到的，没答上来，这里作下记录。</p><h4 id="1-array-flat-n"><a class="header-anchor" href="#1-array-flat-n">¶</a>1、Array.flat(n)</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" target="_blank" rel="noopener">Array.flat(n)</a> 方法会按照一个可指定的深度（n，默认值为 1）递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">arr1.flat()             <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]]</span><br><span class="line">arr2.flat()             <span class="comment">// [1, 2, 3, 4, [5, 6]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]]</span><br><span class="line">arr3.flat(<span class="number">2</span>)            <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 Infinity，可展开任意深度的嵌套数组</span></span><br><span class="line"><span class="keyword">let</span> arr4 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, [<span class="number">7</span>, <span class="number">8</span>, [<span class="number">9</span>, <span class="number">10</span>]]]]]</span><br><span class="line">arr4.flat(<span class="literal">Infinity</span>)     <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><p>也可以利用递归和 concat 方法实现扁平数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(arr.some(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">Array</span>.isArray(item))) &#123;</span><br><span class="line">    arr = [].concat(...arr)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">flatten([<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>]])            <span class="comment">// [1, 2, 3]</span></span><br><span class="line">flatten([<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]])     <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h4 id="2-array-tostring"><a class="header-anchor" href="#2-array-tostring">¶</a>2、Array.toString()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用 Array.toString() 可以将数组转为字符串，再去除`,`即可得到数组</span></span><br><span class="line"><span class="keyword">let</span> arr5 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, [<span class="number">7</span>, <span class="number">8</span>, [<span class="number">9</span>, <span class="number">10</span>]]]]]</span><br><span class="line">arr5.toString()                 <span class="comment">// '1, 2, 3, 4, 5, 6, 7, 8, 9, 10'</span></span><br><span class="line">arr5.toString().split(<span class="string">','</span>)      <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><h4 id="3-更多实现方法见-array-prototype-flat"><a class="header-anchor" href="#3-更多实现方法见-array-prototype-flat">¶</a>3、更多实现方法见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" target="_blank" rel="noopener">Array.prototype.flat()</a></h4><h3 id="二-数组去重"><a class="header-anchor" href="#二-数组去重">¶</a>二、数组去重</h3><h4 id="1-array-from-set"><a class="header-anchor" href="#1-array-from-set">¶</a>1、Array.from、Set</h4><p>Array.from 可以将类数组转化为数组。Set 是 ES6 语法新出的一种定义不重复数组的数据类型。… 是扩展运算符，将 set 里面的值转化为字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]</span><br><span class="line"><span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(list))         <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line">[...new <span class="built_in">Set</span>(list)]                <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h4 id="2-用map存储数据-循环数组进行比对"><a class="header-anchor" href="#2-用map存储数据-循环数组进行比对">¶</a>2、用<code>map</code>存储数据，循环数组进行比对</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">distinct(list) &#123;</span><br><span class="line">  <span class="keyword">let</span> map = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(i <span class="keyword">in</span> map)) &#123;</span><br><span class="line">      map[i] = <span class="number">1</span></span><br><span class="line">      result.push(i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(result)         <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.distinct([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure><h3 id="三-数组排序"><a class="header-anchor" href="#三-数组排序">¶</a>三、数组排序</h3><h4 id="1-array-sort"><a class="header-anchor" href="#1-array-sort">¶</a>1、Array.sort</h4><p>sort 是 Array 内置的排序方法，参数为一个函数。默认排序顺序是在将元素转换为字符串，然后比较它们的 UTF-16 代码单元值序列时构建的。由于它取决于具体实现，因此无法保证排序的时间和空间复杂性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line">list.sort()                      <span class="comment">// [1, 2, 3, 4]  默认是升序</span></span><br><span class="line">list.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)       <span class="comment">// [1, 2, 3, 4]  升序</span></span><br><span class="line">list.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a)       <span class="comment">// [4, 3, 2, 1]  降序</span></span><br></pre></td></tr></table></figure><h4 id="2-冒泡排序"><a class="header-anchor" href="#2-冒泡排序">¶</a>2、冒泡排序</h4><p>参考另一篇随笔：<a href="https://liuxianyu.cn/article/js-bubble-sort.html">JS 中的冒泡排序</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; list.length - <span class="number">1</span>; i ++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; list.length - i - <span class="number">1</span>; j ++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (list[j] &gt; list[j + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">let</span> tmp = list[j]</span><br><span class="line">      list[j] = list[j + <span class="number">1</span>]</span><br><span class="line">      list[j + <span class="number">1</span>] = tmp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(list)       <span class="comment">// [1, 1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h4 id="3-选择排序"><a class="header-anchor" href="#3-选择排序">¶</a>3、选择排序</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">selectSort(list) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i ++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt; list.length; j ++) &#123; </span><br><span class="line">      <span class="keyword">if</span> (list[i] &gt; list[j]) &#123; </span><br><span class="line">        [list[i], list[j]] = [list[j], list[i]]</span><br><span class="line">      &#125; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.selectSort([<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>])    <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="三-数组的最大值"><a class="header-anchor" href="#三-数组的最大值">¶</a>三、数组的最大值</h3><h4 id="1-math-max"><a class="header-anchor" href="#1-math-max">¶</a>1、Math.max()</h4><p>Math.max() 是 Math 对象内置的方法，参数是字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max(...[<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>])       <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">Math</span>.max.apply(...[<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>])       <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h4 id="2-先排序再取最大值"><a class="header-anchor" href="#2-先排序再取最大值">¶</a>2、先排序再取最大值</h4><h3 id="四-合并数值"><a class="header-anchor" href="#四-合并数值">¶</a>四、合并数值</h3><h4 id="1-简洁写法"><a class="header-anchor" href="#1-简洁写法">¶</a>1、简洁写法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].concat([<span class="number">5</span>, <span class="number">6</span>])             <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line">[...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], ...[<span class="number">5</span>, <span class="number">6</span>]]            <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list1.push(...[<span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="built_in">console</span>.log(list1)                      <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h4 id="2-map-push"><a class="header-anchor" href="#2-map-push">¶</a>2、map、push</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">5</span>, <span class="number">6</span>].map(<span class="function"><span class="params">i</span> =&gt;</span> &#123; list2.push(i) &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(list2)                      <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h3 id="五-判断是否包含值"><a class="header-anchor" href="#五-判断是否包含值">¶</a>五、判断是否包含值</h3><h4 id="1-includes-indexof-find-findindex"><a class="header-anchor" href="#1-includes-indexof-find-findindex">¶</a>1、includes、indexOf、find、findIndex</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].includes(<span class="number">4</span>)                 <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].indexOf(<span class="number">4</span>)                  <span class="comment">// 3，存在则返回起始位置的索引，不存在则返回 -1</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].find(<span class="function"><span class="params">i</span> =&gt;</span> i === <span class="number">4</span>)          <span class="comment">// 4，如果数组中不包含则返回 undefined</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].findIndex(<span class="function"><span class="params">i</span> =&gt;</span> i === <span class="number">4</span>)     <span class="comment">// 3，存在则返回起始位置的索引，不存在则返回 -1</span></span><br></pre></td></tr></table></figure><h4 id="2-some"><a class="header-anchor" href="#2-some">¶</a>2、some</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].some(<span class="function"><span class="params">i</span> =&gt;</span> &#123; <span class="keyword">return</span> i === <span class="number">4</span> &#125;)      <span class="comment">// true，如果不包含则返回 false</span></span><br></pre></td></tr></table></figure><h3 id="六-过滤数组"><a class="header-anchor" href="#六-过滤数组">¶</a>六、过滤数组</h3><h4 id="1-filter"><a class="header-anchor" href="#1-filter">¶</a>1、filter</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].filter(<span class="function"><span class="params">i</span> =&gt;</span> i &gt; <span class="number">2</span>)         <span class="comment">// [3, 4]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#介绍&quot;&gt;¶&lt;/a&gt;介绍&lt;/h2&gt;
&lt;p&gt;最近在加强 JavaScript 基础的学习，这里整理一下 Array，主要是一些数组方法。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://liuxianyu.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://liuxianyu.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>函数的防抖和节流</title>
    <link href="http://liuxianyu.cn/article/function-debounce-throttle.html"/>
    <id>http://liuxianyu.cn/article/function-debounce-throttle.html</id>
    <published>2019-11-12T21:23:22.000Z</published>
    <updated>2019-11-12T21:23:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p>最近在加强 JavaScript 基础的学习，这里整理一下函数的防抖（debounce）和节流（throttle）。</p><a id="more"></a><table><thead><tr><th style="text-align:center">类型</th><th>概念</th><th>应用</th></tr></thead><tbody><tr><td style="text-align:center">防抖</td><td>触发事件后在 n 秒内函数只能执行一次并添加计时器，如果在 n 秒内又触发了事件，则会重新重置计时器</td><td>input 的输入建议等</td></tr><tr><td style="text-align:center">节流</td><td>n 秒内触发事件仅执行一次函数</td><td>大段输入内容时记录输入历史</td></tr></tbody></table><h3 id="一-防抖-debounce"><a class="header-anchor" href="#一-防抖-debounce">¶</a>一、防抖 - debounce</h3><p>非立即执行版：触发事件后函数不会立即执行，而是在 n 秒后执行，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。<br>立即执行版：触发事件后函数会立即执行，然后 n 秒内不触发事件才能继续执行函数的效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @desc 函数防抖</span></span><br><span class="line"><span class="comment"> * @param func 函数</span></span><br><span class="line"><span class="comment"> * @param wait 延迟执行毫秒数</span></span><br><span class="line"><span class="comment"> * @param immediate true 表示立即执行，false 表示非立即执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeout</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">arguments</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (timeout) clearTimeout(timeout)</span><br><span class="line">    <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">      <span class="keyword">var</span> callNow = !timeout</span><br><span class="line">      timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        timeout = <span class="literal">null</span></span><br><span class="line">      &#125;, wait)</span><br><span class="line">      <span class="keyword">if</span> (callNow) func.apply(context, args)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        func.apply(context, args)</span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-节流-throttle"><a class="header-anchor" href="#二-节流-throttle">¶</a>二、节流 - throttle</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @desc 函数节流</span></span><br><span class="line"><span class="comment"> * @param func 函数</span></span><br><span class="line"><span class="comment"> * @param wait 延迟执行毫秒数</span></span><br><span class="line"><span class="comment"> * @param type 1 表示时间戳版，2 表示定时器版</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait, type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> previous = <span class="number">0</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timeout</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">if</span> (type === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> now = <span class="built_in">Date</span>.now()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (now - previous &gt; wait) &#123;</span><br><span class="line">        func.apply(context, args)</span><br><span class="line">        previous = now</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( type === <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">        timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          timeout = <span class="literal">null</span></span><br><span class="line">          func.apply(context, args)</span><br><span class="line">        &#125;, wait)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-参考资料"><a class="header-anchor" href="#三-参考资料">¶</a>三、参考资料</h3><p>1、<a href="https://www.jianshu.com/p/c8b86b09daf0" target="_blank" rel="noopener">函数防抖和节流</a><br>2、<a href="https://github.com/mqyqingfeng/Blog/issues/22" target="_blank" rel="noopener">JavaScript专题之跟着 underscore 学防抖</a><br>3、<a href="https://github.com/mqyqingfeng/Blog/issues/26" target="_blank" rel="noopener">JavaScript专题之跟着 underscore 学节流</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#介绍&quot;&gt;¶&lt;/a&gt;介绍&lt;/h2&gt;
&lt;p&gt;最近在加强 JavaScript 基础的学习，这里整理一下函数的防抖（debounce）和节流（throttle）。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://liuxianyu.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://liuxianyu.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中的 call、apply、bind</title>
    <link href="http://liuxianyu.cn/article/js-call-apply-bind.html"/>
    <id>http://liuxianyu.cn/article/js-call-apply-bind.html</id>
    <published>2019-11-10T20:10:42.000Z</published>
    <updated>2019-11-10T20:10:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p>最近在加强 JavaScript 基础的学习，这里整理一下 call、apply、bind。</p><a id="more"></a><h3 id="一-call-apply-的定义"><a class="header-anchor" href="#一-call-apply-的定义">¶</a>一、call、apply 的定义</h3><p>call 和 apply 可以调用函数，改变<code>this</code>指向实现继承和借用别的对象的方法：</p><p>1、Object.call(新<code>this</code>对象, 实参1, 实参2, 实参3…)</p><p>2、Object.apply(新<code>this</code>对象, [实参1, 实参2, 实参3…])</p><h3 id="二-call-apply-的用法"><a class="header-anchor" href="#二-call-apply-的用法">¶</a>二、call、apply 的用法</h3><h4 id="1-间接调用函数-改变函数作用域的this指向"><a class="header-anchor" href="#1-间接调用函数-改变函数作用域的this指向">¶</a>1、间接调用函数，改变函数作用域的<code>this</code>指向</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">foo.apply(<span class="string">'这里是 apply 改变的 this 值'</span>)       <span class="comment">// 这里是 apply 改变的 this 值</span></span><br><span class="line">foo.call(<span class="string">'这里是 call 改变的 this 值'</span>)         <span class="comment">// 这里是 call 改变的 this 值</span></span><br></pre></td></tr></table></figure><p>实质上是 call 将 foo 中<code>this</code>的指向改为 bar，并调用了该函数。call 和 apply 对应的第一个参数就是<code>this</code>，如果不传或者传 null、undefined 时，<code>this</code>指向<code>window</code>。</p><h4 id="2-劫持其他对象的方法"><a class="header-anchor" href="#2-劫持其他对象的方法">¶</a>2、劫持其他对象的方法</h4><p>实现方法见上一个用法举例中的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  name: <span class="string">'张三'</span>,</span><br><span class="line">  logName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = &#123;</span><br><span class="line">  name: <span class="string">'李四'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.logName.call(bar)   <span class="comment">// 李四</span></span><br></pre></td></tr></table></figure><h4 id="3-两个函数实现继承"><a class="header-anchor" href="#3-两个函数实现继承">¶</a>3、两个函数实现继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    consloe.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  Animal.call(<span class="keyword">this</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat(<span class="string">'Black Cat'</span>)</span><br><span class="line">cat.showName()                      <span class="comment">// Black Cat</span></span><br></pre></td></tr></table></figure><h4 id="4-为类数组-arguments-nodelist-添加数组方法-如-push-filter-pop-等："><a class="header-anchor" href="#4-为类数组-arguments-nodelist-添加数组方法-如-push-filter-pop-等：">¶</a>4、为类数组（arguments、nodeList）添加数组方法，如 push、filter、pop 等：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">argumentsFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.push.call(<span class="built_in">arguments</span>, <span class="string">'王五'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)            <span class="comment">// ['张三', '李四', '王五']</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">argumentsFunc(<span class="string">'张三'</span>, <span class="string">'李四'</span>)</span><br></pre></td></tr></table></figure><p>这里也出现了另一个知识点，即<code>当方法没有定义接收数据的参数，但调用方法时传递了参数，如何在方法内使用传递过来的数据</code>。这里可以使用<code>arguments</code>进行接收，arguments 属于类数组，document.getElementByName(‘className’) 拿到的 nodeList 也是类数组。</p><h4 id="5-合并数组"><a class="header-anchor" href="#5-合并数组">¶</a>5、合并数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1, arr2)</span><br><span class="line"><span class="built_in">console</span>.log(arr1)           <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h4 id="6-求数组最大值"><a class="header-anchor" href="#6-求数组最大值">¶</a>6、求数组最大值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, arr3))     <span class="comment">// 9</span></span><br></pre></td></tr></table></figure><h4 id="7-判断字符类型"><a class="header-anchor" href="#7-判断字符类型">¶</a>7、判断字符类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;)      <span class="comment">// '[object Object]'</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([])      <span class="comment">// '[object Array]'</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">''</span>)      <span class="comment">// '[object String]'</span></span><br></pre></td></tr></table></figure><h3 id="三-bind"><a class="header-anchor" href="#三-bind">¶</a>三、bind</h3><p>bind 以后 fooNewBind 重新绑定了方法内部的<code>this</code>指向，此时不会调用方法，不兼容 IE8。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'李四'</span></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  name: <span class="string">'张三'</span>,</span><br><span class="line">  logName: <span class="function"><span class="keyword">function</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, age)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fooNew = foo.logName</span><br><span class="line"><span class="keyword">var</span> fooNewBind = foo.logName.bind(foo)</span><br><span class="line"></span><br><span class="line">fooNew(<span class="number">10</span>)          <span class="comment">// 李四 10</span></span><br><span class="line">fooNewBind(<span class="number">11</span>)      <span class="comment">// 张三 11</span></span><br></pre></td></tr></table></figure></p><p>此时如果<code>bind</code>换成 call 或者 apply 的话，就需要再加上<code>age</code>参数，且会调用方法。</p><h3 id="四-三者异同"><a class="header-anchor" href="#四-三者异同">¶</a>四、三者异同</h3><ul><li>同：都是改变函数的<code>this</code>指向，都可接收参数</li><li>异：bind 和 call 是接收单个参数，apply 是接收数组</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#介绍&quot;&gt;¶&lt;/a&gt;介绍&lt;/h2&gt;
&lt;p&gt;最近在加强 JavaScript 基础的学习，这里整理一下 call、apply、bind。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://liuxianyu.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://liuxianyu.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中的 const、var、let</title>
    <link href="http://liuxianyu.cn/article/js-const-var-let.html"/>
    <id>http://liuxianyu.cn/article/js-const-var-let.html</id>
    <published>2019-11-08T09:41:46.000Z</published>
    <updated>2019-11-08T09:41:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p>ES6 新增了两个重要的关键字：const 和 let，加上之前的 var 有了三个变量的声明方式，整理并记录下来。</p><a id="more"></a><h3 id="一-const"><a class="header-anchor" href="#一-const">¶</a>一、const</h3><p>const 声明一个只读的变量，而且必须初始化。声明后，变量的值就不可以修改。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">2</span>;     <span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">const</span> b;         <span class="comment">// 错误，会报错</span></span><br><span class="line">a += <span class="number">1</span>;          <span class="comment">// 错误，会报错</span></span><br></pre></td></tr></table></figure></p><h3 id="二-var"><a class="header-anchor" href="#二-var">¶</a>二、var</h3><p>var 定义的变量可以修改，如果不初始化会输出<code>undefined</code>，不会报错。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;     <span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">var</span> a;         <span class="comment">// 正确</span></span><br><span class="line">change() &#123;</span><br><span class="line">  a = <span class="number">4</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);       <span class="comment">// 输出 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="三-let"><a class="header-anchor" href="#三-let">¶</a>三、let</h3><p>let 的块级作用域，函数内部使用 let 定义变量后，对函数外部无影响。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);       <span class="comment">// 输出 2</span></span><br><span class="line">change() &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">4</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);       <span class="comment">// 输出 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="四-const-var-let-的比较"><a class="header-anchor" href="#四-const-var-let-的比较">¶</a>四、const、var、let 的比较</h3><h4 id="1-const-和-let-的相同点"><a class="header-anchor" href="#1-const-和-let-的相同点">¶</a>1、const 和 let 的相同点</h4><ul><li>二者都是块级作用域</li><li>都不能和所在作用域内的其他变量或函数拥有相同的名称</li></ul><h4 id="2-const-和-let-的不同点"><a class="header-anchor" href="#2-const-和-let-的不同点">¶</a>2、const 和 let 的不同点</h4><ul><li>const 声明的变量必须初始化，而 let 声明的变量不用</li><li>const 声明的变量不能通过再次修改，也不能再次声明。而 let 声明的变量可以修改。</li></ul><h4 id="3-var-声明的变量会挂载到-window-上-const-和-let-声明的变量不会"><a class="header-anchor" href="#3-var-声明的变量会挂载到-window-上-const-和-let-声明的变量不会">¶</a>3、var 声明的变量会挂载到 window 上，const 和 let 声明的变量不会</h4><h3 id="五-const-的本质"><a class="header-anchor" href="#五-const-的本质">¶</a>五、const 的本质</h3><p>const 声明的变量不可再次修改，但并非是常量，它声明了一个常量引用一个值。使用 const 声明的对象或数组，其实是可变的。下面的代码并不会报错：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> car = &#123; <span class="attr">type</span>: <span class="string">'Fiat'</span>, <span class="attr">model</span>: <span class="string">'500'</span>, <span class="attr">color</span>: <span class="string">'white'</span> &#125;;     <span class="comment">//  创建常量对象</span></span><br><span class="line">car.color = <span class="string">'red'</span>;              <span class="comment">// 修改属性</span></span><br><span class="line">car.owner = <span class="string">'Johnson'</span>;          <span class="comment">// 添加属性</span></span><br></pre></td></tr></table></figure></p><p>但是我们不能对常量对象重新赋值：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> car = &#123; <span class="attr">type</span>: <span class="string">'Fiat'</span>, <span class="attr">model</span>: <span class="string">'500'</span>, <span class="attr">color</span>: <span class="string">'white'</span> &#125;;</span><br><span class="line">car = &#123; <span class="attr">type</span>: <span class="string">'Volvo'</span>, <span class="attr">model</span>: <span class="string">'EX60'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;;           <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure></p><p>const 声明的数组同理，能以下标去修改数组，也能通过<code>push</code>添加元素，但是不能重新赋值</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#介绍&quot;&gt;¶&lt;/a&gt;介绍&lt;/h2&gt;
&lt;p&gt;ES6 新增了两个重要的关键字：const 和 let，加上之前的 var 有了三个变量的声明方式，整理并记录下来。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://liuxianyu.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://liuxianyu.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue 项目中实现 RSA 加密</title>
    <link href="http://liuxianyu.cn/article/vue-rsa.html"/>
    <id>http://liuxianyu.cn/article/vue-rsa.html</id>
    <published>2019-11-07T10:53:08.000Z</published>
    <updated>2019-11-07T10:53:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p>Vue 项目中实现 RSA 加密主要是使用第三方插件，这里推荐使用 <a href="https://github.com/travist/jsencrypt" target="_blank" rel="noopener">jsencrypt</a> 和 <a href="https://www.npmjs.com/package/encryptlong" target="_blank" rel="noopener">encryptlong</a></p><a id="more"></a><h3 id="一-jsencrypt"><a class="header-anchor" href="#一-jsencrypt">¶</a>一、jsencrypt</h3><p><code>jsencrypt</code>在处理一些较短文本的加密时比较好使，如 get 请求参数的加密。<br>如果遇到 post 且参数较多时，就会报错<code>jsencrypt.js Message too long for RSA</code>，这个时候就需要<code>encryptlong</code>登场了。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i jsencrypt -S</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; JSEncrypt &#125; <span class="keyword">from</span> <span class="string">'jsencrypt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  rsaData (data) &#123;</span><br><span class="line">    <span class="keyword">const</span> PUBLIC_KEY = <span class="string">'your rsa public key'</span></span><br><span class="line">    <span class="keyword">let</span> jsencrypt = <span class="keyword">new</span> JSEncrypt()</span><br><span class="line">    jsencrypt.setPublicKey(PUBLIC_KEY)</span><br><span class="line">    <span class="keyword">let</span> result = jsencrypt.encrypt(data)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-encryptlong"><a class="header-anchor" href="#二-encryptlong">¶</a>二、encryptlong</h3><p><code>encryptlong</code>是基于<code>jsencrypt</code>扩展的长文本分段加解密功能。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i encryptlong -S</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; JSEncrypt &#125; <span class="keyword">from</span> <span class="string">'encryptlong'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  encrypt (data) &#123;</span><br><span class="line">    <span class="keyword">const</span> PUBLIC_KEY = <span class="string">'your rsa public key'</span></span><br><span class="line">    <span class="keyword">let</span> encryptor = <span class="keyword">new</span> JSEncrypt()</span><br><span class="line">    encryptor.setPublicKey(PUBLIC_KEY)</span><br><span class="line">    <span class="keyword">const</span> rsaData = encryptor.encryptLong(data)</span><br><span class="line">    <span class="keyword">this</span>.decrypt(rsaData)</span><br><span class="line">    <span class="keyword">return</span> rsaData</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 解密 - PRIVATE_KEY - 验证</span></span><br><span class="line">  <span class="comment">// @param rsaData String</span></span><br><span class="line">  decrypt(rsaData) &#123;</span><br><span class="line">    <span class="keyword">const</span> PRIVATE_KEY = <span class="string">'your rsa private key'</span></span><br><span class="line">    <span class="keyword">let</span> decryptor = <span class="keyword">new</span> JSEncrypt()</span><br><span class="line">    decryptor.setPrivateKey(PRIVATE_KEY)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#介绍&quot;&gt;¶&lt;/a&gt;介绍&lt;/h2&gt;
&lt;p&gt;Vue 项目中实现 RSA 加密主要是使用第三方插件，这里推荐使用 &lt;a href=&quot;https://github.com/travist/jsencrypt&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jsencrypt&lt;/a&gt; 和 &lt;a href=&quot;https://www.npmjs.com/package/encryptlong&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;encryptlong&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://liuxianyu.cn/categories/Vue/"/>
    
      <category term="RSA" scheme="http://liuxianyu.cn/categories/Vue/RSA/"/>
    
      <category term="加密解密" scheme="http://liuxianyu.cn/categories/Vue/RSA/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/"/>
    
    
      <category term="Vue" scheme="http://liuxianyu.cn/tags/Vue/"/>
    
      <category term="加密解密" scheme="http://liuxianyu.cn/tags/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/"/>
    
      <category term="RSA" scheme="http://liuxianyu.cn/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>Cent OS 基础环境搭建</title>
    <link href="http://liuxianyu.cn/article/cent-os-base.html"/>
    <id>http://liuxianyu.cn/article/cent-os-base.html</id>
    <published>2019-11-05T09:52:45.000Z</published>
    <updated>2019-11-05T09:52:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p>趁着双十一买了服务器和域名，这里记录一下 Cent OS 服务器基础环境的搭建。</p><a id="more"></a><h3 id="一-添加-deploy-用户"><a class="header-anchor" href="#一-添加-deploy-用户">¶</a>一、 添加 deploy 用户</h3><p>购买服务器后在实例详情 -&gt; 基本信息 -&gt; 更多 -&gt; 重置实例密码，重启服务器后就可以使用<code>ssh root@47.65.55.62</code>来连接服务器了。</p><p>1、创建用户，默认生成 用户组 和 用户名 相同；将 deploy 加入 root 组<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adduser deploy</span><br><span class="line">usermod -a -G root deploy</span><br></pre></td></tr></table></figure></p><p>2、修改 deploy 的密码<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd deploy</span><br></pre></td></tr></table></figure></p><p>3、切换 sudo 时候无需密码<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure></p><p>找到 root ALL=(ALL:ALL) ALL，在这行下面增加以下代码，NOPASSWD 表示切换 sudo 时候无需输入 root 密码<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deploy ALL=(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure></p><h3 id="二-添加本机的-ssh-到服务器"><a class="header-anchor" href="#二-添加本机的-ssh-到服务器">¶</a>二、 添加本机的 SSH 到服务器</h3><p>以后连接服务器不用每次都输入用户名和密码</p><p>1、查看本机 SSH 公钥<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p><p>2、切换 deploy 用户，服务器创建 .ssh 文件夹，打开服务器 authorized_keys 文件，将本机 SSH 公钥粘贴进去<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">su deploy</span><br><span class="line">cd ~</span><br><span class="line">mkdir .ssh</span><br><span class="line">cd .ssh</span><br><span class="line">vim authorized_keys</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>注意</strong></p><ul><li><strong>巨坑：如果在第 3 步完成后还是不能免密登录的话，把刚刚粘贴进 authorized_keys 文件的秘钥再粘贴一遍即可</strong></li><li><strong>巨坑：猜测是 Cent OS 对第一个公钥的识别有问题，没查找到合适的资料，待查找。</strong></li></ul></blockquote><p>3、配置相应的权限：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 700 /home/deploy/.ssh</span><br><span class="line">chmod 600 /home/deploy/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p><p>4、再使用<code>ssh deploy@47.65.55.62</code>连接服务器就可以免密登录了</p><h3 id="三-安装-git"><a class="header-anchor" href="#三-安装-git">¶</a>三、安装 git</h3><p>-y 代表需要输入 y 的地方自动输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install git -y</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><h3 id="四-安装-nginx"><a class="header-anchor" href="#四-安装-nginx">¶</a>四、安装 nginx</h3><h4 id="一-安装与常见命令"><a class="header-anchor" href="#一-安装与常见命令">¶</a>（一）、安装与常见命令</h4><p>1、安装 nginx 并查看版本号<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nginx -y</span><br><span class="line">nginx -v</span><br></pre></td></tr></table></figure></p><p>2、配置 nginx<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure></p><p>3、nginx 常用命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start/stop/reload/restart/status nginx</span><br></pre></td></tr></table></figure></p><h4 id="二-多配置文件"><a class="header-anchor" href="#二-多配置文件">¶</a>（二）、多配置文件</h4><p>这个服务器之后可能会部署很多学习的项目，为了避免混乱，准备每个项目单独配置。默认配置文件为：<code>/etc/nginx/nginx.conf</code>。</p><p>1、将 nginx 默认配置中的 server 删除，注意保留文件中的<code>include</code>指向。<br><img src="/images/posts/cent-os-base/2.png" alt></p><p>2、在<code>/etc/nginx/conf.d</code>文件夹下创建配置文件，以<code>.conf</code>结尾，配置内容可以参考百度或 <a href="https://blogs.zezeping.com/#/Blog/BlogDetail/16" target="_blank" rel="noopener">Nginx - Vue单页面应用配置</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/conf.d/hexo-blog.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80; </span><br><span class="line">    server_name liuxianyu.cn;</span><br><span class="line"></span><br><span class="line">    root /mnt/projects/hexo-blog/blog;</span><br><span class="line">    index index.html;</span><br><span class="line">    location ^~ /static|img|js|css/ &#123;</span><br><span class="line">      gzip_static on;</span><br><span class="line">      expires max;</span><br><span class="line">      add_header Cache-Control public;</span><br><span class="line">    &#125;</span><br><span class="line">    location / &#123;</span><br><span class="line">      try_files $uri $uri/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~* \.(css|js|gif|jpe?g|png)$ &#123;</span><br><span class="line">      expires 50d;</span><br><span class="line">      access_log off;</span><br><span class="line">      add_header Pragma public;</span><br><span class="line">      add_header Cache-Control &quot;public&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动 nginx 并设置开机自启<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start nginx</span><br><span class="line">sudo systemctl enable nginx</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>注意</strong></p><ul><li><strong>配置安全组规则, 这是个大坑。80 端口没打开的时候，无法通过 ip 直接访问，同事说 2018 年 80 端口还是默认打开的，欺负新人</strong></li></ul></blockquote><p><img src="/images/posts/cent-os-base/1.png" alt></p><h3 id="五-安装-node"><a class="header-anchor" href="#五-安装-node">¶</a>五、安装 node</h3><p>1、选择下载目录（<a href="https://blog.csdn.net/qq_15766181/article/details/80755786" target="_blank" rel="noopener">为什么选择这个目录下载？</a>）：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/</span><br></pre></td></tr></table></figure></p><p>2、下载源文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v12.13.0/node-v12.13.0-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></p><p>3、解压源文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf node-v12.13.0-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></p><p>4、重命名文件夹<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv node-v12.13.0-linux-x64 nodejs</span><br></pre></td></tr></table></figure></p><p>5、修改配置文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure></p><p>6、在当前文件的最后一行加上以下两行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export NODE_HOME=/usr/local/nodejs</span><br><span class="line">export PATH=$NODE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></p><p>7、更新配置文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></p><p>8、查看版本号<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></p><h3 id="六-服务器生成-ssh-key"><a class="header-anchor" href="#六-服务器生成-ssh-key">¶</a>六、服务器生成 ssh key</h3><p>服务器拉取 git 代码时无需输入用户名密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C "liuxy0551@qq.com"</span><br></pre></td></tr></table></figure><h3 id="七-写在后面"><a class="header-anchor" href="#七-写在后面">¶</a>七、写在后面</h3><p>因为是第一次在服务器上操作，很多操作都是尝试着进行的，而我这个人又有点强迫症，所以在很多不太合适的操作过后我都会重置一下服务器。<br>操作步骤为：阿里云控制台 -&gt; 云服务器 ECS -&gt; 选择实例 -&gt; 实例详情 -&gt; 右上角 停止实例 -&gt; 左侧 本实例磁盘 -&gt; 重新初始化磁盘。<br>但是下次再连接服务器的时候就会报错了<code>WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</code>，根据提示编辑<code>known_hosts</code>文件，删除服务器的记录即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#介绍&quot;&gt;¶&lt;/a&gt;介绍&lt;/h2&gt;
&lt;p&gt;趁着双十一买了服务器和域名，这里记录一下 Cent OS 服务器基础环境的搭建。&lt;/p&gt;
    
    </summary>
    
      <category term="Cent OS" scheme="http://liuxianyu.cn/categories/Cent-OS/"/>
    
      <category term="Linux" scheme="http://liuxianyu.cn/categories/Cent-OS/Linux/"/>
    
      <category term="服务器" scheme="http://liuxianyu.cn/categories/Cent-OS/Linux/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="服务器" scheme="http://liuxianyu.cn/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="http://liuxianyu.cn/tags/Linux/"/>
    
      <category term="Cent OS" scheme="http://liuxianyu.cn/tags/Cent-OS/"/>
    
  </entry>
  
  <entry>
    <title>JS 中的冒泡排序</title>
    <link href="http://liuxianyu.cn/article/js-bubble-sort.html"/>
    <id>http://liuxianyu.cn/article/js-bubble-sort.html</id>
    <published>2019-10-02T16:48:19.000Z</published>
    <updated>2019-10-02T16:48:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p>记录一下使用 JavaScript 实现的冒泡排序算法，实际操作可查看 <a href="https://liuxy0551.github.io/my-vue/#/bubble" target="_blank" rel="noopener">https://liuxy0551.github.io/my-vue/#/bubble</a>。</p><a id="more"></a><h3 id="一-算法原理"><a class="header-anchor" href="#一-算法原理">¶</a>一、算法原理</h3><ul><li>1、比较两个相邻的元素，将值较大的元素交换到后面</li><li>2、每一对相邻元素都进行相同操作</li><li>3、针对所有的元素重复上述两步，除了最后一个元素</li><li>4、持续每次对越来越少的元素重复上述步骤，直到没有任何一对相邻元素需要比较</li></ul><h3 id="二-算法思路"><a class="header-anchor" href="#二-算法思路">¶</a>二、算法思路</h3><p><strong>依次比较相邻的两个数，将比较小的数放在前面，比较大的数放在后面</strong></p><ul><li>第一次比较：首先比较第一个数和第二个数，将较小的数放在前面，较大的数放在后面；</li><li>第二次比较：比较第二个数和第三个数，将较小的数放在前面，较大的数放在后面；</li><li>…</li><li>如此继续，直到比较到最后两个数，将较小的数放在前面，较大的数放在后面；</li><li>在上面一趟比较完成后，最后一个数一定是数组中最大的一个数，所以在第二趟比较时，最后一个数不参与比较；</li><li>在第二趟比较完成后，倒数第二个数也一定是数组倒数第二大数，所以在第三趟比较时，倒数第二个数不参与比较；</li><li>依次类推，每一趟比较次数依次减少</li></ul><p><strong>n 个数进行冒泡排序，总共要进行 n - 1 次排序，每趟进行 n - 1 次比较</strong></p><h3 id="三-算法描述"><a class="header-anchor" href="#三-算法描述">¶</a>三、算法描述</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 冒泡排序</span></span><br><span class="line">  bubbleSort (list) &#123;</span><br><span class="line">    <span class="comment">// 需要进行 list.length 次比较</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// 第 i 趟比较</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; list.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">        <span class="comment">// 开始进行比较，如果 list[i] &gt; list[i + 1]，则交换位置</span></span><br><span class="line">        <span class="keyword">if</span> (list[j] &gt; list[j + <span class="number">1</span>]) &#123;</span><br><span class="line">          <span class="keyword">let</span> temp = list[j]</span><br><span class="line">          list[j] = list[j + <span class="number">1</span>]</span><br><span class="line">          list[j + <span class="number">1</span>] = temp</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="四-算法比较："><a class="header-anchor" href="#四-算法比较：">¶</a>四、算法比较：</h3><table><thead><tr><th style="text-align:center">排序算法</th><th style="text-align:center">平均时间复杂度</th></tr></thead><tbody><tr><td style="text-align:center">冒泡排序</td><td style="text-align:center">O(n2)</td></tr><tr><td style="text-align:center">选择排序</td><td style="text-align:center">O(n2)</td></tr><tr><td style="text-align:center">插入排序</td><td style="text-align:center">O(n2)</td></tr><tr><td style="text-align:center">希尔排序</td><td style="text-align:center">O(n1.5)</td></tr><tr><td style="text-align:center">快速排序</td><td style="text-align:center">O(N*logN)</td></tr><tr><td style="text-align:center">归并排序</td><td style="text-align:center">O(N*logN)</td></tr><tr><td style="text-align:center">堆排序</td><td style="text-align:center">O(N*logN)</td></tr><tr><td style="text-align:center">基数排序</td><td style="text-align:center">O(d(n+r))</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#介绍&quot;&gt;¶&lt;/a&gt;介绍&lt;/h2&gt;
&lt;p&gt;记录一下使用 JavaScript 实现的冒泡排序算法，实际操作可查看 &lt;a href=&quot;https://liuxy0551.github.io/my-vue/#/bubble&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://liuxy0551.github.io/my-vue/#/bubble&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://liuxianyu.cn/categories/JavaScript/"/>
    
      <category term="算法" scheme="http://liuxianyu.cn/categories/JavaScript/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="JavaScript" scheme="http://liuxianyu.cn/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://liuxianyu.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
